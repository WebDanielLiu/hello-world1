function sayHi() {
  for (var i=0; i<arguments.length; i++) {
    alert("Hi", + arguments[i]);
  }
}
sayHi("Cat", "Alice"); // 'Hi, Cat', then 'Hi, Alice'

//1. implement function add(a,b,c...)
//add(3); //return 3 
//add(3,4) //return 7 
//add(3,4,5) //return 12 

function add(a,b,c) {
  var total=0;
  for (var i=0; i<arguments.length; i++) {
     total += arguments[i];
     alert(total);
  }
}
add(3, 4, 5); // 3, 7, 12
 
 
//2. implement function max(a,b,c...)
//max(3); // returns 3
//max(3, 4);  // returns 4
//max(3, 4, 5);  // returns 5

function max() {
  var biggest;
  for (var i=0; i<arguments.length; i++) {
     if (i==0)
       biggest = arguments[i];
     else {
        if (arguments[i]>biggest) {
           biggest=arguments[i];
        }
     }
  }
  alert(biggest);
}
max(3, 4, 5); // 5

//3. You have the following JavaScript code. Write the appropriate HTML so all three statements are equivalent (will bring the same value).
//document.forms["myForm"].elements["myField"].value
//document.forms[1].elements[1].value
//document.myForm.myField.value

<!DOCTYPE html>
<html>
<head>
<title>Title of the document</title>
</head>
<body>
<form id="myForm">
The content of the document

My Field<input type="text" id="myField">  
</form>
</body>
</html>

//4. Read the API on object String and Array.
//http://docs.sencha.com/extjs/4.2.1/#!/api/String
//http://docs.sencha.com/extjs/4.2.1/#!/api/Array
//Then write a one-line function (less than 80 characters) that returns a boolean indicating 
//whether or not a string is a palindrome. e.g. "A nut for a jar of tuna." is a palindrome. (Java API)
function isPalindrome(x) {
  return(x == x.split('').reverse().join(''));
}
console.log(isPalindrome("anutforajaroftuna"));

//5. Read this article then run the following code in a browser and explain the result.
//http://ryanmorr.com/understanding-scope-and-context-in-javascript/
var myObject = {
  foo: "bar",
  func: function() {
    var self = this;
    console.log("outer func:  this.foo = " + this.foo); //bar
    console.log("outer func:  self.foo = " + self.foo); //bar
    (function() {
      console.log("inner func:  this.foo = " + this.foo); //undefined
      console.log("inner func:  self.foo = " + self.foo); //bar
    })();
  }
};
myObject.func(); 
var test = myObject.func; 
test(); //all undefined -because "this" is undefined

//6.	Implement the following function. It should return the sum of the two numbers:
//sum(3)(4); // returns 7

var sum = function(x) {
return function(y) {
	return x + y;
	};
};
alert(sum(3)(4)); //7

//7. Tell me what the function below does. Do you see the bug? A: Finding the min number.
function foo(arr) {
  var a1 = -Infinity, a2 = -Infinity;
  arr.forEach(function(num) {
    if (num > Math.min(a1, a2)) {
      if (a1 < a2) {
        a1 = num;
      } else {
        a2 = num;
      }
    }
  });
  return (Math.min(a1, a2)); //should use return (Math.max(a1,a2)); find the max number.
}
console.log(foo([3,1,5,8,9,10]));

function foo1(arr) {
  var a1 = arr[0];
  arr.forEach(function(num) {
    if (num < a1) {
      a1=num;
    }
  });
  return a1;
}

//8. Explain what is MVC
//MVC (Model, View, Controller) MVC is a software architecture - the structure of the system - that separates 
//domain/application/business (whatever you prefer) logic from the rest of the user interface. It does this by 
//separating the application into three parts: the model, the view, and the controller.
